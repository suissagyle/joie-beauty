{% form 'product', product %}
<div class="custom-variant-collections">
  <!-- Tabs -->
  <div class="collection-tabs">
    {% assign collections = "Spring,Summer,Autumn,Winter" | split: ',' %}
    {% for collection in collections %}
      <button type="button" class="collection-tab" data-collection="{{ collection }}">{{ collection }}</button>
    {% endfor %}
  </div>

  <!-- Full product info section -->
  <div class="variant-swatches-block">
    <h1 class="product-title">{{ product.title }}</h1>
    <div class="product-price">{{ product.price | money }}</div>
    <div class="product-description">{{ product.description }}</div>

    <!-- Swatches -->
    <div class="variant-swatches" style="margin: 1rem 0;">
      {% for variant in product.variants %}
        {% assign color = variant.metafields.custom.color_swatch.value %}
        {% assign color_name = variant.metafields.custom.color_name.value %}
        {% assign collection = variant.metafields.custom.collection_name.value %}
        {% assign images = variant.metafields.custom.variant_images.value %}

        {% if color and color_name and collection %}
          <button
            type="radio"
            class="variant-swatch"
            data-collection="{{ collection }}"
            data-variant-id="{{ variant.id }}"
            data-color-name="{{ color_name }}"
            data-images='{{ images | json }}'
            data-media-id="{{ variant.featured_media.id }}"
            style="background-color: {{ color }};"
            aria-label="{{ color_name }}"
            value="{{ value }}"
            {% if variant.id == selected_variant.id %}checked{% endif %}
          ></button>
        {% endif %}
      {% endfor %}
    </div>

    <!-- Variant Info -->
    <div class="product-info-meta" style="margin-top: 1rem;">
      <div><strong>Color:</strong> <span class="variant-color-name">—</span></div>
      <div><strong>Collection:</strong> <span class="variant-collection-name">—</span></div>
    </div>

    <!-- Gallery -->
    <div id="variant-gallery" style="margin-top: 1rem; display: flex; gap: 10px; flex-wrap: wrap;"></div>

    <!-- Add to Cart -->
    <input type="hidden" name="id" id="selected-variant-id" value="{{ product.variants.first.id }}">
    <button type="submit" class="btn">Add to Cart</button>
  </div>
</div>
{% endform %}

<style>
  .collection-tabs {
    display: flex;
    gap: 12px;
    margin-bottom: 1rem;
  }

  .collection-tab {
    background: #f1f1f1;
    border: none;
    padding: 8px 14px;
    cursor: pointer;
    border-radius: 20px;
    font-weight: 500;
    transition: background 0.2s;
  }

  .collection-tab.active {
    background: #000;
    color: #fff;
  }

  .variant-swatch {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: 1px solid #ccc;
    margin-right: 8px;
    cursor: pointer;
    display: none;
  }

  .variant-swatch.active {
    display: inline-block;
  }

  .variant-swatch.selected {
    border: 2px solid #000;
  }

  #variant-gallery img {
    width: 100px;
    height: auto;
    border-radius: 6px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const tabs = document.querySelectorAll('.collection-tab');
    const swatches = document.querySelectorAll('.variant-swatch');
    const gallery = document.getElementById('variant-gallery');
    const colorNameSpan = document.querySelector('.variant-color-name');
    const collectionNameSpan = document.querySelector('.variant-collection-name');
    const variantInput = document.getElementById('selected-variant-id');

    function showSwatchesFor(collection) {
      // Update tab state
      tabs.forEach(tab => tab.classList.remove('active'));
      document.querySelector(`.collection-tab[data-collection="${collection}"]`).classList.add('active');

      let found = false;

      swatches.forEach(swatch => {
        swatch.classList.remove('selected');
        if (swatch.dataset.collection === collection) {
          swatch.classList.add('active');
          if (!found) {
            found = true;
            swatch.click(); // Auto-select the first swatch
          }
        } else {
          swatch.classList.remove('active');
        }
      });
    }

    function selectSwatch(swatch) {
      // Deselect all
      swatches.forEach(s => s.classList.remove('selected'));
      swatch.classList.add('selected');
    
      // Update color info
      colorNameSpan.textContent = swatch.dataset.colorName;
      collectionNameSpan.textContent = swatch.dataset.collection;
    
      // Update hidden input
      variantInput.value = swatch.dataset.variantId;
    
      // Update main gallery (replace product images)
      const gallery = document.getElementById('variant-gallery');
      gallery.innerHTML = '';
      const images = JSON.parse(swatch.dataset.images || '[]');
      images.forEach((src, index) => {
        const wrapper = document.createElement('div');
        wrapper.classList.add('product__media-item');
        wrapper.style.flex = '0 0 auto';
    
        const img = document.createElement('img');
        img.src = src;
        img.alt = swatch.dataset.colorName + ' - ' + (index + 1);
        img.style.maxWidth = '100%';
        img.style.borderRadius = '6px';
    
        wrapper.appendChild(img);
        gallery.appendChild(wrapper);
      });
    }


    // Tab click handler
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        showSwatchesFor(tab.dataset.collection);
      });
    });

    // Swatch click handler
    swatches.forEach(swatch => {
      swatch.addEventListener('click', () => {
        selectSwatch(swatch);
      });
    });

    // Initialize first tab & swatch
    if (tabs.length > 0) {
      showSwatchesFor(tabs[0].dataset.collection);
    }


    const variantSelectors = document.querySelectorAll('input[name="Color"]');

      variantSelectors.forEach((input) => {
        input.addEventListener('change', function () {
          const selectedVariantId = this.getAttribute('data-variant-id');

          const variants = {{ product.variants | json }};
          const matchedVariant = variants.find(v => v.id == selectedVariantId);

          if (matchedVariant && matchedVariant.featured_media) {
            const mediaId = matchedVariant.featured_media.id;
            const mediaElement = document.querySelector(`[data-media-id="${mediaId}"]`);
            if (mediaElement) {
              mediaElement.click();
            }
          }
        });
      });


      function initSwatchListeners() {
        const swatches = document.querySelectorAll('.variant-swatch');
    
        swatches.forEach((swatch) => {
          swatch.addEventListener('change', function () {
            const variantId = this.getAttribute('data-variant-id');
            const mediaId = this.getAttribute('data-media-id');
    
            // Find all media elements and deactivate them
            document.querySelectorAll('.product__media-item').forEach(item => {
              item.classList.remove('is-active');
            });
    
            // Activate the new media item
            const activeMedia = document.querySelector(`[data-media-id*="-${mediaId}"]`);
            if (activeMedia) {
              activeMedia.classList.add('is-active');
    
              // Scroll to it if needed
              activeMedia.scrollIntoView({ behavior: 'smooth', inline: 'start' });
            }
          });
        });
      }
    
      initSwatchListeners();
    
      // Re-init when tab switches (for dynamically inserted products)
      document.querySelectorAll('[data-tab-button]').forEach(btn => {
        btn.addEventListener('click', () => {
          setTimeout(() => {
            initSwatchListeners();
          }, 300);
        });
      });
    
  });
</script>
